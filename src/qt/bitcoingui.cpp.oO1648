/*
 * Qt4 bitcoin GUI.
 *
 * W.J. van der Laan 2011-2012
 * The Bitcoin Developers 2011-2012
 */
#include "bitcoingui.h"
#include "transactiontablemodel.h"
#include "addressbookpage.h"
#include "sendcoinsdialog.h"
#include "signverifymessagedialog.h"
#include "optionsdialog.h"
#include "aboutdialog.h"
#include "clientmodel.h"
#include "walletmodel.h"
#include "editaddressdialog.h"
#include "optionsmodel.h"
#include "tutoStackDialog.h"
#include "tutoWriteDialog.h"
#include "transactiondescdialog.h"
#include "addresstablemodel.h"
#include "transactionview.h"
#include "overviewpage.h"
#include "statisticspage.h"
#include "blockbrowser.h"
#include "poolbrowser.h"
#include "chatwindow.h"
#include "bitcoinunits.h"
#include "guiconstants.h"
#include "askpassphrasedialog.h"
#include "notificator.h"
#include "guiutil.h"
#include "rpcconsole.h"
#include "wallet.h"

#ifdef Q_OS_MAC
#include "macdockiconhandler.h"
#endif

#include <QApplication>
#include <QMainWindow>
#include <QMenuBar>
#include <QMenu>
#include <QIcon>
#include <QTabWidget>
#include <QVBoxLayout>
#include <QToolBar>
#include <QStatusBar>
#include <QLabel>
#include <QLineEdit>
#include <QPushButton>
#include <QLocale>
#include <QMessageBox>
#include <QMimeData>
#include <QProgressBar>
#include <QStackedWidget>
#include <QDateTime>
#include <QMovie>
#include <QFileDialog>
#include <QDesktopServices>
#include <QTimer>
#include <QDragEnterEvent>
#include <QUrl>
#include <QStyle>
#include <QFont>
#include <QFontDatabase>

#include <iostream>

extern CWallet* pwalletMain;
extern int64_t nLastCoinStakeSearchInterval;
extern unsigned int nTargetSpacing;
double GetPoSKernelPS();
int convertmode = 0;

BitcoinGUI::BitcoinGUI(QWidget *parent):
    QMainWindow(parent),
    clientModel(0),
    walletModel(0),
    encryptWalletAction(0),
    changePassphraseAction(0),
    unlockWalletAction(0),
    lockWalletAction(0),
    aboutQtAction(0),
    trayIcon(0),
    notificator(0),
    rpcConsole(0)
{
    setFixedSize(1000, 600);
    setWindowFlags(Qt::FramelessWindowHint);
    setWindowTitle(tr("HYC") + " " + tr("Wallet"));
    setObjectName("HYC-qt");
    setStyleSheet("#HYC-qt {background-color:#fbf9f6; font-family:'Open Sans';}");

#ifndef Q_OS_MAC
    qApp->setWindowIcon(QIcon(":icons/bitcoin"));
    setWindowIcon(QIcon(":icons/bitcoin"));
#else
    setUnifiedTitleAndToolBarOnMac(true);
    QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);
#endif

    // Include Fonts
    includeFonts();

    // Accept D&D of URIs
    setAcceptDrops(true);

    // Create actions for the toolbar, menu bar and tray/dock icon
    createActions();

    // Create the tray icon (or setup the dock icon)
    createTrayIcon();

    // Create additional content for pages
    createContent();

    // Create navigation tabs
    overviewPage = new OverviewPage();
    statisticsPage = new StatisticsPage(this);
    chatWindow = new ChatWindow(this);
	blockBrowser = new BlockBrowser(this);
	poolBrowser = new PoolBrowser(this);
    transactionsPage = new QWidget(this);
    QVBoxLayout *transactionVbox = new QVBoxLayout();
    transactionView = new TransactionView(this);
    transactionVbox->addWidget(transactionView);
    transactionVbox->setContentsMargins(20,0,20,20);
    transactionsPage->setLayout(transactionVbox);
    transactionsPage->setStyleSheet("background:rgb(255,249,247)");
    addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);
    receiveCoinsPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab);
    sendCoinsPage = new SendCoinsDialog(this);
    signVerifyMessageDialog = new SignVerifyMessageDialog(this);

    //Define Central Widget
    centralWidget = new QStackedWidget(this);
    centralWidget->addWidget(overviewPage);
    centralWidget->addWidget(statisticsPage);
    centralWidget->addWidget(chatWindow);
    centralWidget->addWidget(blockBrowser);
	centralWidget->addWidget(poolBrowser);
    centralWidget->addWidget(transactionsPage);
    centralWidget->addWidget(addressBookPage);
    centralWidget->addWidget(receiveCoinsPage);
    centralWidget->addWidget(sendCoinsPage);
    centralWidget->addWidget(settingsPage);
    centralWidget->setMaximumWidth(1000);
    centralWidget->setMaximumHeight(600);
    setCentralWidget(centralWidget);

    // Create status bar notification icons
    labelEncryptionIcon = new QLabel();
    labelStakingIcon = new QLabel();
    labelConnectionsIcon = new QLabel();
    labelBlocksIcon = new QLabel();
    actionConvertIcon = new QAction(QIcon(":/icons/changevalHYC"), tr(""), this);
    actionConvertIcon->setToolTip("Convert currency");

    // Get current staking status
    if (GetBoolArg("-staking", true))
    {
        QTimer *timerStakingIcon = new QTimer(labelStakingIcon);
        connect(timerStakingIcon, SIGNAL(timeout()), this, SLOT(updateStakingIcon()));
        timerStakingIcon->start(30 * 1000);
        updateStakingIcon();
    }

    // Progress bar and label for blocks download, disabled for current HYC wallet
    progressBarLabel = new QLabel();
    progressBarLabel->setVisible(false);
    progressBar = new QProgressBar();

    // Create toolbars
    createToolBars();

    // When clicking the current currency logo, the currency will be converted into HYC, BTC or USD
    connect(actionConvertIcon, SIGNAL(triggered()), this, SLOT(sConvert()));

    // Clicking on a transaction on the overview page simply sends you to transaction history page
    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));
    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));

    // Double-clicking on a transaction on the transaction history page shows details
    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));

    // RPC Console
    rpcConsole = new RPCConsole(this);
    connect(openRPCConsoleAction, SIGNAL(triggered()), rpcConsole, SLOT(show()));
    connect(openRPCConsoleAction2, SIGNAL(triggered()), rpcConsole, SLOT(show()));

    // Clicking on "Verify Message" in the address book sends you to the verify message tab
    connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));

    // Clicking on "Sign Message" in the receive coins page sends you to the sign message tab
    connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));

    //Go to overview page
    gotoOverviewPage();
}

BitcoinGUI::~BitcoinGUI()
{
    if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)
        trayIcon->hide();
}

void BitcoinGUI::includeFonts()
{
    QStringList list;
    list << "OpenSans-Regular.ttf" << "OpenSans-Bold.ttf" << "OpenSans-ExtraBold.ttf";
    int fontID(-1);
    bool fontWarningShown(false);
    for (QStringList::const_iterator constIterator = list.constBegin(); constIterator != list.constEnd(); ++constIterator) {
        QFile res(":/fonts/" + *constIterator);
        if (res.open(QIODevice::ReadOnly) == false) {
            if (fontWarningShown == false) {
                QMessageBox::warning(0, "Application", (QString)"Impossible to open " + QChar(0x00AB) + *constIterator + QChar(0x00BB) + ".");
                fontWarningShown = true;
            }
        } else {
            fontID = QFontDatabase::addApplicationFontFromData(res.readAll());
            if (fontID == -1 && fontWarningShown == false) {
                QMessageBox::warning(0, "Application", (QString)"Impossible to open " + QChar(0x00AB) + *constIterator + QChar(0x00BB) + ".");
                fontWarningShown = true;
            }
        }
    }
}

void BitcoinGUI::createActions()
{
    QActionGroup *tabGroup = new QActionGroup(this);

    // Navigation bar actions
    overviewAction = new QAction("Dashboard", this);
    overviewAction->setToolTip(tr("Show general overview"));
    overviewAction->setCheckable(true);
    overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));
    tabGroup->addAction(overviewAction);

    sendCoinsAction = new QAction("Send", this);
    sendCoinsAction->setToolTip(tr("Send coins to a HYC address"));
    sendCoinsAction->setCheckable(true);
    sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));
    sendCoinsAction->setObjectName("send");
    tabGroup->addAction(sendCoinsAction);

    receiveCoinsAction = new QAction("Receive", this);
    receiveCoinsAction->setToolTip(tr("Receive addresses list"));
    receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));
    receiveCoinsAction->setCheckable(true);
    tabGroup->addAction(receiveCoinsAction);

    historyAction = new QAction("Transactions", this);
    historyAction->setToolTip(tr("Browse transaction history"));
    historyAction->setCheckable(true);
    historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));
    tabGroup->addAction(historyAction);

    addressBookAction = new QAction("Address Book", this);
    addressBookAction->setToolTip(tr("Edit the list of stored addresses and labels"));
    addressBookAction->setCheckable(true);
    addressBookAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_5));
    tabGroup->addAction(addressBookAction);

    poolAction = new QAction("Market Data", this);
    poolAction->setToolTip(tr("Show market data"));
    poolAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_6));
    poolAction->setCheckable(true);
    tabGroup->addAction(poolAction);

    chatAction = new QAction("Social", this);
    chatAction->setToolTip(tr("View social media info"));
    chatAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_7));
    chatAction->setCheckable(true);
    tabGroup->addAction(chatAction);

    blockAction = new QAction("Block Explorer", this);
    blockAction->setToolTip(tr("Explore the HYC blockchain"));
    blockAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_8));
    blockAction->setCheckable(true);
    tabGroup->addAction(blockAction);

    actionmenuAction = new QAction("Actions", this);
    actionmenuAction->setToolTip(tr("Multiple wallet actions"));
    actionmenuAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_9));
    actionmenuAction->setCheckable(true);
    tabGroup->addAction(actionmenuAction);

    settingsAction = new QAction("Actions", this);
    settingsAction->setToolTip(tr("Multiple wallet actions"));
    settingsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_9));
    settingsAction->setCheckable(true);
    tabGroup->addAction(settingsAction);

    statisticsAction = new QAction("Statistics", this);
    statisticsAction->setToolTip(tr("View HYC statistics"));
    statisticsAction->setCheckable(true);
    tabGroup->addAction(statisticsAction);

    optionsAction = new QAction("Settings", this);
    optionsAction->setToolTip(tr("Modify settings for HYC wallet"));
    tabGroup->addAction(optionsAction);

    // Connect actions to functions
    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));
    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));
    connect(blockAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(blockAction, SIGNAL(triggered()), this, SLOT(gotoBlockBrowser()));
    connect(poolAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
	connect(poolAction, SIGNAL(triggered()), this, SLOT(gotoPoolBrowser()));
    connect(overviewAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));
    connect(statisticsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(statisticsAction, SIGNAL(triggered()), this, SLOT(gotoStatisticsPage()));
    connect(chatAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(chatAction, SIGNAL(triggered()), this, SLOT(gotoChatPage()));
    connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));
    connect(addressBookAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));
    connect(settingsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));
    connect(settingsAction, SIGNAL(triggered()), this, SLOT(gotoSettingsPage()));
    connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));

    // Upper right toolbar actions
    toggleHideAction = new QAction(QIcon(":/icons/mini"), tr("&Show / Hide"), this);

    quitAction = new QAction(QIcon(":/icons/quit"), tr("E&xit"), this);
    quitAction->setToolTip(tr("Quit application"));

    quitAction2 = new QAction(QIcon(":/icons/quit"), tr("E&xit"), this);
    quitAction2->setToolTip(tr("Quit application"));
    quitAction2->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));

    // ACTIONS tab actions
    tutoStackAction = new QAction(QIcon(":/images/howtostake"),tr(""), this);
    aboutAction = new QAction(QIcon(":/images/aboutHYC"), tr(""), this);
    aboutAction->setToolTip(tr("Show information about HYC"));
    aboutQtAction = new QAction(QIcon(":/trolltech/qmessagebox/images/qtlogo-64.png"), tr("About &Qt"), this);
    aboutQtAction->setToolTip(tr("Show information about Qt"));
    encryptWalletAction = new QAction(QIcon(":/images/encryptwallet"), tr(""), this);
    encryptWalletAction->setToolTip(tr("Encrypt or decrypt wallet"));
    encryptWalletAction->setCheckable(true);
    backupWalletAction = new QAction(QIcon(":/images/backupwallet"), tr(""), this);
    backupWalletAction->setToolTip(tr("Backup wallet to another location"));
    changePassphraseAction = new QAction(QIcon(":/images/newpassphrase"), tr(""), this);
    changePassphraseAction->setToolTip(tr("Change the passphrase used for wallet encryption"));
    unlockWalletAction = new QAction(QIcon(":/images/unlockwallet"), tr(""), this);
    unlockWalletAction->setToolTip(tr("Unlock wallet"));
    lockWalletAction = new QAction(QIcon(":/images/lockwallet"), tr(""), this);
    lockWalletAction->setToolTip(tr("Lock wallet"));
    signMessageAction = new QAction(QIcon(":/images/signmessage"), tr(""), this);
    verifyMessageAction = new QAction(QIcon(":/images/verifymessage"), tr(""), this);
    exportAction = new QAction(QIcon(":/icons/export"), tr("&Export..."), this);
    exportAction->setToolTip(tr("Export the data in the current tab to a file"));
    openRPCConsoleAction = new QAction(QIcon(":/images/debugwindow"), tr(""), this);
    openRPCConsoleAction->setToolTip(tr("Open debugging and diagnostic console"));
    signMessageAction2 = new QAction(QIcon(":/icons/edit"), tr("Sign &message..."), this);
    verifyMessageAction2 = new QAction(QIcon(":/icons/transaction_0"), tr("&Verify message..."), this);
    openRPCConsoleAction2 = new QAction(QIcon(":/icons/debugwindow"), tr("&Debug window"), this);
    openRPCConsoleAction2->setToolTip(tr("Open debugging and diagnostic console"));

#ifdef Q_OS_MAC
    // Create a decoupled menu bar on Mac which stays even if the window is closed
    appMenuBar = new QMenuBar();
    // Configure the menus
    QMenu *file = appMenuBar->addMenu(tr("&File"));
    file->addAction(backupWalletAction);
    file->addAction(exportAction);
    file->addAction(signMessageAction);
    file->addAction(verifyMessageAction);
    file->addSeparator();
    file->addAction(quitAction2);

    QMenu *settings = appMenuBar->addMenu(tr("&Settings"));
    settings->addAction(encryptWalletAction);
    settings->addAction(changePassphraseAction);
    settings->addAction(unlockWalletAction);
    settings->addAction(lockWalletAction);
    settings->addSeparator();
    settings->addAction(optionsAction);

    QMenu *help = appMenuBar->addMenu(tr("&Help"));
    help->addAction(openRPCConsoleAction);
    help->addSeparator();
    help->addAction(aboutAction);
    help->addAction(aboutQtAction);
#else
    //Don't create menu, frameless design
#endif

    // Connect actions to slots
    connect(quitAction, SIGNAL(triggered()), this, SLOT(close()));
    connect(quitAction2, SIGNAL(triggered()), qApp, SLOT(quit()));
    connect(tutoStackAction, SIGNAL(triggered()), this, SLOT(tutoStackClicked()));
    connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));
    connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
    connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));
    connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));
    connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));
    connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));
    connect(unlockWalletAction, SIGNAL(triggered()), this, SLOT(unlockWallet()));
    connect(lockWalletAction, SIGNAL(triggered()), this, SLOT(lockWallet()));
    connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));
    connect(verifyMessageAction, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));
    connect(signMessageAction2, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));
    connect(verifyMessageAction2, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));
}

void BitcoinGUI::createContent()
{
    //Create Actions Page Content
    settingsPage = new QWidget(this);
    settingsPage->setFixedSize(1000,600);
    settingsPage->setStyleSheet("QToolBar{border:0px;} QToolBar QToolButton{border:0px;}");

    QFrame *WalletOptions = new QFrame(settingsPage);
    WalletOptions->setGeometry(20,0,700,400);
    WalletOptions->setFixedSize(700,400);
    WalletOptions->setStyleSheet("background-image:url(:/images/walletoptions);background-repeat:no-repeat;");
    QFrame *WalletOptionsButtonFrame = new QFrame(WalletOptions);
    WalletOptionsButtonFrame->setGeometry(0,45,700,200);
    WalletOptionsButtonFrame->setStyleSheet("background-image:url(:/icons/transpix);background-repeat:no-repeat;");
    QToolBar *WalletOptionsToolbar = new QToolBar(WalletOptionsButtonFrame);
    WalletOptionsToolbar->setOrientation(Qt::Horizontal);
    WalletOptionsToolbar->setToolButtonStyle(Qt::ToolButtonIconOnly);
    WalletOptionsToolbar->setMovable(false);
    WalletOptionsToolbar->setIconSize(QSize(158,49));
    WalletOptionsToolbar->addAction(lockWalletAction);
    WalletOptionsToolbar->addAction(unlockWalletAction);
    WalletOptionsToolbar->addAction(encryptWalletAction);
    WalletOptionsToolbar->addAction(backupWalletAction);
    WalletOptionsToolbar->addAction(changePassphraseAction);

    QFrame *SystemFunctions = new QFrame(settingsPage);
    SystemFunctions->setGeometry(713,0,267,500);
    SystemFunctions->setFixedSize(270,500);
    SystemFunctions->setStyleSheet("background-image:url(:/images/systemfunctions);background-repeat:no-repeat;");
    QFrame *SystemFunctionsButtonFrame = new QFrame(SystemFunctions);
    SystemFunctionsButtonFrame->setGeometry(0,45,270,500);
    SystemFunctionsButtonFrame->setStyleSheet("background-image:url(:/icons/transpix);background-repeat:no-repeat;");
    QToolBar *SystemFunctionsToolbar = new QToolBar(SystemFunctionsButtonFrame);
    SystemFunctionsToolbar->setGeometry(53,0,270,450);
    SystemFunctionsToolbar->setOrientation(Qt::Vertical);
    SystemFunctionsToolbar->setToolButtonStyle(Qt::ToolButtonIconOnly);
    SystemFunctionsToolbar->setMovable(false);
    SystemFunctionsToolbar->setIconSize(QSize(158,49));
    SystemFunctionsToolbar->addAction(signMessageAction);
    SystemFunctionsToolbar->addAction(verifyMessageAction);
    SystemFunctionsToolbar->addAction(openRPCConsoleAction);

    QFrame *QuickSupport = new QFrame(settingsPage);
    QuickSupport->setGeometry(20,200,700,300);
    QuickSupport->setFixedSize(700,300);
    QuickSupport->setStyleSheet("background-image:url(:/images/quicksupport);background-repeat:no-repeat;");
    QFrame *QuickSupportButtonFrame = new QFrame(QuickSupport);
    QuickSupportButtonFrame->setGeometry(0,45,700,300);
    QuickSupportButtonFrame->setStyleSheet("background-image:url(:/icons/transpix);background-repeat:no-repeat;");
    QToolBar *QuickSupportToolbar = new QToolBar(QuickSupportButtonFrame);
    QuickSupportToolbar->setOrientation(Qt::Horizontal);
    QuickSupportToolbar->setToolButtonStyle(Qt::ToolButtonIconOnly);
    QuickSupportToolbar->setMovable(false);
    QuickSupportToolbar->setIconSize(QSize(158,49));
    QuickSupportToolbar->addAction(tutoStackAction);
    QuickSupportToolbar->addAction(aboutAction);  
}

void BitcoinGUI::createToolBars()
{
    // Create status bar
    addToolBarBreak(Qt::TopToolBarArea);
    QToolBar *statusBar = addToolBar(tr("Status bar"));
    addToolBar(Qt::TopToolBarArea,statusBar);
    statusBar->setOrientation(Qt::Horizontal);
    statusBar->setMovable(false);
    statusBar->setObjectName("statusBar");
    statusBar->setFixedSize(1000,28);
    statusBar->setIconSize(QSize(42,28));
    QWidget *addMargin = new QWidget(this);
    addMargin->setFixedWidth(35);
    statusBar->addWidget(addMargin);
    statusBar->addWidget(labelEncryptionIcon);
    statusBar->addWidget(labelConnectionsIcon);
    statusBar->addWidget(labelBlocksIcon);
    statusBar->addWidget(labelStakingIcon);
    statusBar->setStyleSheet("QToolBar QToolButton {border:0px; qproperty-alignment: 'AlignBottom | AlignLeft'; qproperty-wordWrap: true;} QToolBar{background-image: url(:/images/header-top); background-repeat:no-repeat; border:0px; width:1000px; height:28px;}");
    //insertToolBarBreak(statusBar);

    //Create toolbar to convert, minimalise and quit
    QToolBar *quitBar = addToolBar(tr("Minimalise and Quit bar"));
    quitBar->setObjectName("quitBar");
    addToolBar(Qt::RightToolBarArea,quitBar);
    quitBar->setToolButtonStyle(Qt::ToolButtonIconOnly);
    quitBar->setOrientation(Qt::Horizontal);
    quitBar->setMovable(false);
    quitBar->setIconSize(QSize(35,28));
    quitBar->setFixedSize(1000,28);
    QWidget* quitSpacer = new QWidget();
    quitSpacer->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    quitBar->addWidget(quitSpacer);
    quitBar->addAction(actionConvertIcon);
    quitBar->addAction(toggleHideAction);
    quitBar->addAction(quitAction);
    //quitBar->setStyleSheet("QToolBar QToolButton {border:0px; qproperty-alignment: 'AlignBottom | AlignLeft'; qproperty-wordWrap: true; } QToolBar { border:0px; width:130px; height:28px;}");
    quitBar->setStyleSheet("QToolBar QToolButton {border:0px;} QToolBar { border:0px; width:1000px; height:28px;}");
//    QHBoxLayout *quitBarVbox = new QHBoxLayout();
//    quitBarVbox->addWidget(quitBar);
//    quitBarVbox->setContentsMargins(0,0,0,0);
    wId = new QWidget(this);
//    wId->setFixedSize(128,28);
//    wId->move(872,0);
//    wId->setLayout(quitBarVbox);
//    wId->setFocus();
    insertToolBarBreak(quitBar);

    QToolBar *navigationBar = addToolBar(tr("Navigation Bar"));
    navigationBar->setObjectName("navigationBar");
    addToolBar(Qt::TopToolBarArea,navigationBar);
    navigationBar->setOrientation(Qt::Horizontal);
    navigationBar->setMovable( false );
    navigationBar->setToolButtonStyle(Qt::ToolButtonTextOnly);
    navigationBar->setIconSize(QSize(30,54));
    navigationBar->setFixedSize(1000,60);
    navigationBar->addAction(overviewAction);
    navigationBar->addAction(sendCoinsAction);
    navigationBar->addAction(receiveCoinsAction);
    navigationBar->addAction(historyAction);
    navigationBar->addAction(addressBookAction);
    navigationBar->addAction(poolAction);
    navigationBar->addAction(chatAction);
    navigationBar->addAction(blockAction);
    navigationBar->addAction(settingsAction);
    navigationBar->setStyleSheet("QToolBar {border: 0px; height:54px; background-image: url(:/images/menu); background-repeat:no-repeat; width:1000px; height:60px;} QToolBar QToolButton:hover{color: #F37255;} QToolBar QToolButton:checked {color: #F37255;} QToolBar QToolButton{font-weight:bold; margin-bottom:12px; padding-left:8px; font-size:11px; font-family:'Open Sans Extrabold'; color:#848890; text-align:left; background:transparent; text-transform:uppercase; height:100%;}");
    insertToolBarBreak(navigationBar);

    //Export and Settings bar
    QToolBar *extraFunctionsBar = addToolBar(tr("Extra Functions bar"));
    extraFunctionsBar->setObjectName("extraFunctionsBar");
    addToolBar(Qt::RightToolBarArea,extraFunctionsBar);
    extraFunctionsBar->setToolButtonStyle(Qt::ToolButtonTextOnly);
    extraFunctionsBar->setOrientation(Qt::Horizontal);
    extraFunctionsBar->setMovable(false);
    extraFunctionsBar->setFixedWidth(200);
    extraFunctionsBar->setFixedHeight(60);
    extraFunctionsBar->setStyleSheet("QToolBar {border:0px; height:54px;} QToolBar QToolButton:hover{color: #F37255;} QToolBar QToolButton:checked {color: #F37255;} QToolBar QToolButton{margin-bottom:13px; font-size:11px; font-family:'Open Sans Extrabold'; color:#33363B; text-align:right; background:transparent; text-transform:uppercase; height:100%; padding-left:20px;}");
    extraFunctionsBar->setFont(QFont(":/fonts/OpenSansBold"));
    QWidget* extraSpacer = new QWidget();
    extraSpacer->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    extraFunctionsBar->addWidget(extraSpacer);
    extraFunctionsBar->addAction(exportAction);
    extraFunctionsBar->addAction(optionsAction);
    insertToolBarBreak(extraFunctionsBar);
    QHBoxLayout *extraFunctionsBarVbox = new QHBoxLayout();
    extraFunctionsBarVbox->addWidget(extraFunctionsBar);
    extraFunctionsBarVbox->setContentsMargins(0,0,0,0);
    wId2 = new QWidget(this);
    wId2->setFixedSize(200,60);
    wId2->move(798,28);
    wId2->setLayout(extraFunctionsBarVbox);
    wId2->setFocus();
}

void BitcoinGUI::setClientModel(ClientModel *clientModel)
{
    this->clientModel = clientModel;
    if(clientModel)
    {
        // Replace some strings and icons, when using the testnet
        if(clientModel->isTestNet())
        {
            setWindowTitle(windowTitle() + QString(" ") + tr("[testnet]"));
#ifndef Q_OS_MAC
            qApp->setWindowIcon(QIcon(":icons/bitcoin_testnet"));
            setWindowIcon(QIcon(":icons/bitcoin_testnet"));
#else
            MacDockIconHandler::instance()->setIcon(QIcon(":icons/bitcoin_testnet"));
#endif
            if(trayIcon)
            {
                trayIcon->setToolTip(tr("HYC client") + QString(" ") + tr("[testnet]"));
                trayIcon->setIcon(QIcon(":/icons/toolbar_testnet"));
                toggleHideAction->setIcon(QIcon(":/icons/toolbar_testnet"));
            }

            aboutAction->setIcon(QIcon(":/icons/toolbar_testnet"));
        }

        // Keep up to date with client
        setNumConnections(clientModel->getNumConnections());
        connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));

        setNumBlocks(clientModel->getNumBlocks(), clientModel->getNumBlocksOfPeers());
        connect(clientModel, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int)));

        // Report errors from network/worker thread
        connect(clientModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));

        rpcConsole->setClientModel(clientModel);
        addressBookPage->setOptionsModel(clientModel->getOptionsModel());
        receiveCoinsPage->setOptionsModel(clientModel->getOptionsModel());
    }
}

void BitcoinGUI::setWalletModel(WalletModel *walletModel)
{
    this->walletModel = walletModel;
    if(walletModel)
    {
        // Report errors from wallet thread
  